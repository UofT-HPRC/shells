// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axiStreamGate,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=273,HLS_SYN_LUT=303}" *)

module axiStreamGate (
        ap_clk,
        ap_rst_n,
        packetIn_TDATA,
        packetIn_TVALID,
        packetIn_TREADY,
        packetIn_TLAST,
        packetIn_TKEEP,
        packetOut_TDATA,
        packetOut_TVALID,
        packetOut_TREADY,
        packetOut_TLAST,
        packetOut_TKEEP,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 5'b1;
parameter    ap_ST_fsm_state2 = 5'b10;
parameter    ap_ST_fsm_state3 = 5'b100;
parameter    ap_ST_fsm_state4 = 5'b1000;
parameter    ap_ST_fsm_state5 = 5'b10000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] packetIn_TDATA;
input   packetIn_TVALID;
output   packetIn_TREADY;
input  [0:0] packetIn_TLAST;
input  [7:0] packetIn_TKEEP;
output  [63:0] packetOut_TDATA;
output   packetOut_TVALID;
input   packetOut_TREADY;
output  [0:0] packetOut_TLAST;
output  [7:0] packetOut_TKEEP;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg packetIn_TREADY;

reg    ap_rst_n_inv;
wire   [31:0] programming;
reg   [63:0] packetOut_V_data_V_1_data_out;
reg    packetOut_V_data_V_1_vld_in;
wire    packetOut_V_data_V_1_vld_out;
wire    packetOut_V_data_V_1_ack_in;
wire    packetOut_V_data_V_1_ack_out;
reg   [63:0] packetOut_V_data_V_1_payload_A;
reg   [63:0] packetOut_V_data_V_1_payload_B;
reg    packetOut_V_data_V_1_sel_rd;
reg    packetOut_V_data_V_1_sel_wr;
wire    packetOut_V_data_V_1_sel;
wire    packetOut_V_data_V_1_load_A;
wire    packetOut_V_data_V_1_load_B;
reg   [1:0] packetOut_V_data_V_1_state;
wire    packetOut_V_data_V_1_state_cmp_full;
reg   [0:0] packetOut_V_last_V_1_data_out;
reg    packetOut_V_last_V_1_vld_in;
wire    packetOut_V_last_V_1_vld_out;
wire    packetOut_V_last_V_1_ack_in;
wire    packetOut_V_last_V_1_ack_out;
reg   [0:0] packetOut_V_last_V_1_payload_A;
reg   [0:0] packetOut_V_last_V_1_payload_B;
reg    packetOut_V_last_V_1_sel_rd;
reg    packetOut_V_last_V_1_sel_wr;
wire    packetOut_V_last_V_1_sel;
wire    packetOut_V_last_V_1_load_A;
wire    packetOut_V_last_V_1_load_B;
reg   [1:0] packetOut_V_last_V_1_state;
wire    packetOut_V_last_V_1_state_cmp_full;
reg   [7:0] packetOut_V_keep_V_1_data_out;
reg    packetOut_V_keep_V_1_vld_in;
wire    packetOut_V_keep_V_1_vld_out;
wire    packetOut_V_keep_V_1_ack_in;
wire    packetOut_V_keep_V_1_ack_out;
reg   [7:0] packetOut_V_keep_V_1_payload_A;
reg   [7:0] packetOut_V_keep_V_1_payload_B;
reg    packetOut_V_keep_V_1_sel_rd;
reg    packetOut_V_keep_V_1_sel_wr;
wire    packetOut_V_keep_V_1_sel;
wire    packetOut_V_keep_V_1_load_A;
wire    packetOut_V_keep_V_1_load_B;
reg   [1:0] packetOut_V_keep_V_1_state;
wire    packetOut_V_keep_V_1_state_cmp_full;
reg   [31:0] programSafe;
reg    programSafe_ap_vld;
reg    packetIn_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state3;
reg    packetOut_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_state4;
reg   [0:0] tmp_reg_123;
reg   [0:0] tmp_1_reg_127;
wire   [0:0] tmp_fu_102_p2;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_1_nbreadreq_fu_66_p5;
reg   [0:0] tmp_last_V_reg_136;
reg    ap_reg_ioackin_programSafe_dummy_ack;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 packetOut_V_data_V_1_sel_rd = 1'b0;
#0 packetOut_V_data_V_1_sel_wr = 1'b0;
#0 packetOut_V_data_V_1_state = 2'b00;
#0 packetOut_V_last_V_1_sel_rd = 1'b0;
#0 packetOut_V_last_V_1_sel_wr = 1'b0;
#0 packetOut_V_last_V_1_state = 2'b00;
#0 packetOut_V_keep_V_1_sel_rd = 1'b0;
#0 packetOut_V_keep_V_1_sel_wr = 1'b0;
#0 packetOut_V_keep_V_1_state = 2'b00;
#0 ap_CS_fsm = 5'b1;
#0 ap_reg_ioackin_programSafe_dummy_ack = 1'b0;
end

axiStreamGate_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
axiStreamGate_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .programming(programming),
    .programSafe(programSafe),
    .programSafe_ap_vld(programSafe_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_programSafe_dummy_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & ((1'b0 == tmp_reg_123) | (1'b0 == tmp_1_reg_127) | ~(1'b0 == tmp_last_V_reg_136)) & ~(~(1'b0 == tmp_reg_123) & ~(1'b0 == tmp_1_reg_127) & (1'b0 == packetOut_V_data_V_1_ack_in)))) begin
            ap_reg_ioackin_programSafe_dummy_ack <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & ((1'b0 == tmp_reg_123) | (1'b0 == tmp_1_reg_127) | ~(1'b0 == tmp_last_V_reg_136)) & 1'b1)) begin
            ap_reg_ioackin_programSafe_dummy_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        packetOut_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == packetOut_V_data_V_1_ack_out) & (1'b1 == packetOut_V_data_V_1_vld_out))) begin
            packetOut_V_data_V_1_sel_rd <= ~packetOut_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        packetOut_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == packetOut_V_data_V_1_vld_in) & (1'b1 == packetOut_V_data_V_1_ack_in))) begin
            packetOut_V_data_V_1_sel_wr <= ~packetOut_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        packetOut_V_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == packetOut_V_data_V_1_vld_in) & (1'b1 == packetOut_V_data_V_1_ack_out) & (packetOut_V_data_V_1_state == ap_const_lv2_3)) | ((1'b0 == packetOut_V_data_V_1_vld_in) & (packetOut_V_data_V_1_state == ap_const_lv2_2)))) begin
            packetOut_V_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == packetOut_V_data_V_1_vld_in) & (1'b0 == packetOut_V_data_V_1_ack_out) & (packetOut_V_data_V_1_state == ap_const_lv2_3)) | ((1'b0 == packetOut_V_data_V_1_ack_out) & (packetOut_V_data_V_1_state == ap_const_lv2_1)))) begin
            packetOut_V_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == packetOut_V_data_V_1_vld_in) & (packetOut_V_data_V_1_state == ap_const_lv2_2)) | ((1'b1 == packetOut_V_data_V_1_ack_out) & (packetOut_V_data_V_1_state == ap_const_lv2_1)) | ((packetOut_V_data_V_1_state == ap_const_lv2_3) & ~((1'b1 == packetOut_V_data_V_1_vld_in) & (1'b0 == packetOut_V_data_V_1_ack_out)) & ~((1'b0 == packetOut_V_data_V_1_vld_in) & (1'b1 == packetOut_V_data_V_1_ack_out))))) begin
            packetOut_V_data_V_1_state <= ap_const_lv2_3;
        end else begin
            packetOut_V_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        packetOut_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == packetOut_V_keep_V_1_ack_out) & (1'b1 == packetOut_V_keep_V_1_vld_out))) begin
            packetOut_V_keep_V_1_sel_rd <= ~packetOut_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        packetOut_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == packetOut_V_keep_V_1_vld_in) & (1'b1 == packetOut_V_keep_V_1_ack_in))) begin
            packetOut_V_keep_V_1_sel_wr <= ~packetOut_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        packetOut_V_keep_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == packetOut_V_keep_V_1_vld_in) & (1'b1 == packetOut_V_keep_V_1_ack_out) & (ap_const_lv2_3 == packetOut_V_keep_V_1_state)) | ((1'b0 == packetOut_V_keep_V_1_vld_in) & (ap_const_lv2_2 == packetOut_V_keep_V_1_state)))) begin
            packetOut_V_keep_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == packetOut_V_keep_V_1_vld_in) & (1'b0 == packetOut_V_keep_V_1_ack_out) & (ap_const_lv2_3 == packetOut_V_keep_V_1_state)) | ((1'b0 == packetOut_V_keep_V_1_ack_out) & (ap_const_lv2_1 == packetOut_V_keep_V_1_state)))) begin
            packetOut_V_keep_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == packetOut_V_keep_V_1_vld_in) & (ap_const_lv2_2 == packetOut_V_keep_V_1_state)) | ((1'b1 == packetOut_V_keep_V_1_ack_out) & (ap_const_lv2_1 == packetOut_V_keep_V_1_state)) | ((ap_const_lv2_3 == packetOut_V_keep_V_1_state) & ~((1'b1 == packetOut_V_keep_V_1_vld_in) & (1'b0 == packetOut_V_keep_V_1_ack_out)) & ~((1'b0 == packetOut_V_keep_V_1_vld_in) & (1'b1 == packetOut_V_keep_V_1_ack_out))))) begin
            packetOut_V_keep_V_1_state <= ap_const_lv2_3;
        end else begin
            packetOut_V_keep_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        packetOut_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == packetOut_V_last_V_1_ack_out) & (1'b1 == packetOut_V_last_V_1_vld_out))) begin
            packetOut_V_last_V_1_sel_rd <= ~packetOut_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        packetOut_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == packetOut_V_last_V_1_vld_in) & (1'b1 == packetOut_V_last_V_1_ack_in))) begin
            packetOut_V_last_V_1_sel_wr <= ~packetOut_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        packetOut_V_last_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == packetOut_V_last_V_1_vld_in) & (1'b1 == packetOut_V_last_V_1_ack_out) & (ap_const_lv2_3 == packetOut_V_last_V_1_state)) | ((1'b0 == packetOut_V_last_V_1_vld_in) & (ap_const_lv2_2 == packetOut_V_last_V_1_state)))) begin
            packetOut_V_last_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == packetOut_V_last_V_1_vld_in) & (1'b0 == packetOut_V_last_V_1_ack_out) & (ap_const_lv2_3 == packetOut_V_last_V_1_state)) | ((1'b0 == packetOut_V_last_V_1_ack_out) & (ap_const_lv2_1 == packetOut_V_last_V_1_state)))) begin
            packetOut_V_last_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == packetOut_V_last_V_1_vld_in) & (ap_const_lv2_2 == packetOut_V_last_V_1_state)) | ((1'b1 == packetOut_V_last_V_1_ack_out) & (ap_const_lv2_1 == packetOut_V_last_V_1_state)) | ((ap_const_lv2_3 == packetOut_V_last_V_1_state) & ~((1'b1 == packetOut_V_last_V_1_vld_in) & (1'b0 == packetOut_V_last_V_1_ack_out)) & ~((1'b0 == packetOut_V_last_V_1_vld_in) & (1'b1 == packetOut_V_last_V_1_ack_out))))) begin
            packetOut_V_last_V_1_state <= ap_const_lv2_3;
        end else begin
            packetOut_V_last_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == packetOut_V_data_V_1_load_A)) begin
        packetOut_V_data_V_1_payload_A <= packetIn_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == packetOut_V_data_V_1_load_B)) begin
        packetOut_V_data_V_1_payload_B <= packetIn_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == packetOut_V_keep_V_1_load_A)) begin
        packetOut_V_keep_V_1_payload_A <= packetIn_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == packetOut_V_keep_V_1_load_B)) begin
        packetOut_V_keep_V_1_payload_B <= packetIn_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == packetOut_V_last_V_1_load_A)) begin
        packetOut_V_last_V_1_payload_A <= packetIn_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == packetOut_V_last_V_1_load_B)) begin
        packetOut_V_last_V_1_payload_B <= packetIn_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == tmp_fu_102_p2))) begin
        tmp_1_reg_127 <= tmp_1_nbreadreq_fu_66_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((packetIn_TVALID == 1'b0) | (1'b0 == packetOut_V_data_V_1_ack_in)))) begin
        tmp_last_V_reg_136 <= packetIn_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_reg_123 <= tmp_fu_102_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        packetIn_TDATA_blk_n = packetIn_TVALID;
    end else begin
        packetIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((packetIn_TVALID == 1'b0) | (1'b0 == packetOut_V_data_V_1_ack_in)))) begin
        packetIn_TREADY = 1'b1;
    end else begin
        packetIn_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == tmp_reg_123) & ~(1'b0 == tmp_1_reg_127)))) begin
        packetOut_TDATA_blk_n = packetOut_V_data_V_1_state[1'b1];
    end else begin
        packetOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == packetOut_V_data_V_1_sel)) begin
        packetOut_V_data_V_1_data_out = packetOut_V_data_V_1_payload_B;
    end else begin
        packetOut_V_data_V_1_data_out = packetOut_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((packetIn_TVALID == 1'b0) | (1'b0 == packetOut_V_data_V_1_ack_in)))) begin
        packetOut_V_data_V_1_vld_in = 1'b1;
    end else begin
        packetOut_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == packetOut_V_keep_V_1_sel)) begin
        packetOut_V_keep_V_1_data_out = packetOut_V_keep_V_1_payload_B;
    end else begin
        packetOut_V_keep_V_1_data_out = packetOut_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((packetIn_TVALID == 1'b0) | (1'b0 == packetOut_V_data_V_1_ack_in)))) begin
        packetOut_V_keep_V_1_vld_in = 1'b1;
    end else begin
        packetOut_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == packetOut_V_last_V_1_sel)) begin
        packetOut_V_last_V_1_data_out = packetOut_V_last_V_1_payload_B;
    end else begin
        packetOut_V_last_V_1_data_out = packetOut_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((packetIn_TVALID == 1'b0) | (1'b0 == packetOut_V_data_V_1_ack_in)))) begin
        packetOut_V_last_V_1_vld_in = 1'b1;
    end else begin
        packetOut_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((1'b0 == tmp_reg_123) | (1'b0 == tmp_1_reg_127) | ~(1'b0 == tmp_last_V_reg_136)))) begin
        programSafe = ap_const_lv32_1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        programSafe = ap_const_lv32_0;
    end else begin
        programSafe = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & ((1'b0 == tmp_reg_123) | (1'b0 == tmp_1_reg_127) | ~(1'b0 == tmp_last_V_reg_136)) & (1'b0 == ap_reg_ioackin_programSafe_dummy_ack)))) begin
        programSafe_ap_vld = 1'b1;
    end else begin
        programSafe_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~(1'b0 == tmp_fu_102_p2) & ~(1'b0 == tmp_1_nbreadreq_fu_66_p5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~((packetIn_TVALID == 1'b0) | (1'b0 == packetOut_V_data_V_1_ack_in))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((((1'b0 == tmp_reg_123) | (1'b0 == tmp_1_reg_127) | ~(1'b0 == tmp_last_V_reg_136)) & ~(~(1'b0 == tmp_reg_123) & ~(1'b0 == tmp_1_reg_127) & (1'b0 == packetOut_V_data_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~(1'b0 == tmp_reg_123) & ~(1'b0 == tmp_1_reg_127) & (1'b0 == tmp_last_V_reg_136) & ~(~(1'b0 == tmp_reg_123) & ~(1'b0 == tmp_1_reg_127) & (1'b0 == packetOut_V_data_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign packetOut_TDATA = packetOut_V_data_V_1_data_out;

assign packetOut_TKEEP = packetOut_V_keep_V_1_data_out;

assign packetOut_TLAST = packetOut_V_last_V_1_data_out;

assign packetOut_TVALID = packetOut_V_keep_V_1_state[1'b0];

assign packetOut_V_data_V_1_ack_in = packetOut_V_data_V_1_state[1'b1];

assign packetOut_V_data_V_1_ack_out = packetOut_TREADY;

assign packetOut_V_data_V_1_load_A = (packetOut_V_data_V_1_state_cmp_full & ~packetOut_V_data_V_1_sel_wr);

assign packetOut_V_data_V_1_load_B = (packetOut_V_data_V_1_sel_wr & packetOut_V_data_V_1_state_cmp_full);

assign packetOut_V_data_V_1_sel = packetOut_V_data_V_1_sel_rd;

assign packetOut_V_data_V_1_state_cmp_full = ((packetOut_V_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign packetOut_V_data_V_1_vld_out = packetOut_V_data_V_1_state[1'b0];

assign packetOut_V_keep_V_1_ack_in = packetOut_V_keep_V_1_state[1'b1];

assign packetOut_V_keep_V_1_ack_out = packetOut_TREADY;

assign packetOut_V_keep_V_1_load_A = (packetOut_V_keep_V_1_state_cmp_full & ~packetOut_V_keep_V_1_sel_wr);

assign packetOut_V_keep_V_1_load_B = (packetOut_V_keep_V_1_sel_wr & packetOut_V_keep_V_1_state_cmp_full);

assign packetOut_V_keep_V_1_sel = packetOut_V_keep_V_1_sel_rd;

assign packetOut_V_keep_V_1_state_cmp_full = ((packetOut_V_keep_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign packetOut_V_keep_V_1_vld_out = packetOut_V_keep_V_1_state[1'b0];

assign packetOut_V_last_V_1_ack_in = packetOut_V_last_V_1_state[1'b1];

assign packetOut_V_last_V_1_ack_out = packetOut_TREADY;

assign packetOut_V_last_V_1_load_A = (packetOut_V_last_V_1_state_cmp_full & ~packetOut_V_last_V_1_sel_wr);

assign packetOut_V_last_V_1_load_B = (packetOut_V_last_V_1_sel_wr & packetOut_V_last_V_1_state_cmp_full);

assign packetOut_V_last_V_1_sel = packetOut_V_last_V_1_sel_rd;

assign packetOut_V_last_V_1_state_cmp_full = ((packetOut_V_last_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign packetOut_V_last_V_1_vld_out = packetOut_V_last_V_1_state[1'b0];

assign tmp_1_nbreadreq_fu_66_p5 = packetIn_TVALID;

assign tmp_fu_102_p2 = ((programming == ap_const_lv32_0) ? 1'b1 : 1'b0);

endmodule //axiStreamGate
