// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="reverseEndian64,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=320,HLS_SYN_LUT=179}" *)

module reverseEndian64 (
        ap_clk,
        ap_rst_n,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TLAST,
        stream_in_TKEEP,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TLAST,
        stream_out_TKEEP
);

parameter    ap_ST_fsm_state1 = 4'b1;
parameter    ap_ST_fsm_state2 = 4'b10;
parameter    ap_ST_fsm_state3 = 4'b100;
parameter    ap_ST_fsm_state4 = 4'b1000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_38 = 32'b111000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_37 = 32'b110111;

input   ap_clk;
input   ap_rst_n;
input  [63:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [0:0] stream_in_TLAST;
input  [7:0] stream_in_TKEEP;
output  [63:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [0:0] stream_out_TLAST;
output  [7:0] stream_out_TKEEP;

reg    ap_rst_n_inv;
reg   [63:0] stream_in_V_data_V_0_data_out;
wire    stream_in_V_data_V_0_vld_in;
wire    stream_in_V_data_V_0_vld_out;
wire    stream_in_V_data_V_0_ack_in;
reg    stream_in_V_data_V_0_ack_out;
reg   [63:0] stream_in_V_data_V_0_payload_A;
reg   [63:0] stream_in_V_data_V_0_payload_B;
reg    stream_in_V_data_V_0_sel_rd;
reg    stream_in_V_data_V_0_sel_wr;
wire    stream_in_V_data_V_0_sel;
wire    stream_in_V_data_V_0_load_A;
wire    stream_in_V_data_V_0_load_B;
reg   [1:0] stream_in_V_data_V_0_state;
wire    stream_in_V_data_V_0_state_cmp_full;
reg   [0:0] stream_in_V_last_V_0_data_out;
wire    stream_in_V_last_V_0_vld_in;
wire    stream_in_V_last_V_0_vld_out;
wire    stream_in_V_last_V_0_ack_in;
reg    stream_in_V_last_V_0_ack_out;
reg   [0:0] stream_in_V_last_V_0_payload_A;
reg   [0:0] stream_in_V_last_V_0_payload_B;
reg    stream_in_V_last_V_0_sel_rd;
reg    stream_in_V_last_V_0_sel_wr;
wire    stream_in_V_last_V_0_sel;
wire    stream_in_V_last_V_0_load_A;
wire    stream_in_V_last_V_0_load_B;
reg   [1:0] stream_in_V_last_V_0_state;
wire    stream_in_V_last_V_0_state_cmp_full;
reg   [7:0] stream_in_V_tkeep_V_0_data_out;
wire    stream_in_V_tkeep_V_0_vld_in;
wire    stream_in_V_tkeep_V_0_vld_out;
wire    stream_in_V_tkeep_V_0_ack_in;
reg    stream_in_V_tkeep_V_0_ack_out;
reg   [7:0] stream_in_V_tkeep_V_0_payload_A;
reg   [7:0] stream_in_V_tkeep_V_0_payload_B;
reg    stream_in_V_tkeep_V_0_sel_rd;
reg    stream_in_V_tkeep_V_0_sel_wr;
wire    stream_in_V_tkeep_V_0_sel;
wire    stream_in_V_tkeep_V_0_load_A;
wire    stream_in_V_tkeep_V_0_load_B;
reg   [1:0] stream_in_V_tkeep_V_0_state;
wire    stream_in_V_tkeep_V_0_state_cmp_full;
reg   [63:0] stream_out_V_data_V_1_data_out;
reg    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [63:0] stream_out_V_data_V_1_payload_A;
reg   [63:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
reg   [0:0] stream_out_V_last_V_1_data_out;
reg    stream_out_V_last_V_1_vld_in;
wire    stream_out_V_last_V_1_vld_out;
wire    stream_out_V_last_V_1_ack_in;
wire    stream_out_V_last_V_1_ack_out;
reg   [0:0] stream_out_V_last_V_1_payload_A;
reg   [0:0] stream_out_V_last_V_1_payload_B;
reg    stream_out_V_last_V_1_sel_rd;
reg    stream_out_V_last_V_1_sel_wr;
wire    stream_out_V_last_V_1_sel;
wire    stream_out_V_last_V_1_load_A;
wire    stream_out_V_last_V_1_load_B;
reg   [1:0] stream_out_V_last_V_1_state;
wire    stream_out_V_last_V_1_state_cmp_full;
reg   [7:0] stream_out_V_tkeep_V_1_data_out;
reg    stream_out_V_tkeep_V_1_vld_in;
wire    stream_out_V_tkeep_V_1_vld_out;
wire    stream_out_V_tkeep_V_1_ack_in;
wire    stream_out_V_tkeep_V_1_ack_out;
reg   [7:0] stream_out_V_tkeep_V_1_payload_A;
reg   [7:0] stream_out_V_tkeep_V_1_payload_B;
reg    stream_out_V_tkeep_V_1_sel_rd;
reg    stream_out_V_tkeep_V_1_sel_wr;
wire    stream_out_V_tkeep_V_1_sel;
wire    stream_out_V_tkeep_V_1_load_A;
wire    stream_out_V_tkeep_V_1_load_B;
reg   [1:0] stream_out_V_tkeep_V_1_state;
wire    stream_out_V_tkeep_V_1_state_cmp_full;
reg    stream_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state3;
reg    stream_out_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_state4;
wire   [63:0] x_V_fu_179_p9;
wire   [7:0] tmp_fu_105_p1;
wire   [7:0] tmp_2_fu_119_p4;
wire   [7:0] tmp_5_fu_149_p4;
wire   [7:0] tmp_3_fu_129_p4;
wire   [7:0] tmp_6_fu_159_p4;
wire   [7:0] tmp_4_fu_139_p4;
wire   [7:0] tmp_7_fu_169_p4;
wire   [7:0] tmp_1_fu_109_p4;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 stream_in_V_data_V_0_sel_rd = 1'b0;
#0 stream_in_V_data_V_0_sel_wr = 1'b0;
#0 stream_in_V_data_V_0_state = 2'b00;
#0 stream_in_V_last_V_0_sel_rd = 1'b0;
#0 stream_in_V_last_V_0_sel_wr = 1'b0;
#0 stream_in_V_last_V_0_state = 2'b00;
#0 stream_in_V_tkeep_V_0_sel_rd = 1'b0;
#0 stream_in_V_tkeep_V_0_sel_wr = 1'b0;
#0 stream_in_V_tkeep_V_0_state = 2'b00;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'b00;
#0 stream_out_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_V_last_V_1_sel_wr = 1'b0;
#0 stream_out_V_last_V_1_state = 2'b00;
#0 stream_out_V_tkeep_V_1_sel_rd = 1'b0;
#0 stream_out_V_tkeep_V_1_sel_wr = 1'b0;
#0 stream_out_V_tkeep_V_1_state = 2'b00;
#0 ap_CS_fsm = 4'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_data_V_0_ack_out) & (1'b1 == stream_in_V_data_V_0_vld_out))) begin
            stream_in_V_data_V_0_sel_rd <= ~stream_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_data_V_0_vld_in) & (1'b1 == stream_in_V_data_V_0_ack_in))) begin
            stream_in_V_data_V_0_sel_wr <= ~stream_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == stream_in_V_data_V_0_vld_in) & (1'b1 == stream_in_V_data_V_0_ack_out) & (stream_in_V_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == stream_in_V_data_V_0_vld_in) & (stream_in_V_data_V_0_state == ap_const_lv2_2)))) begin
            stream_in_V_data_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == stream_in_V_data_V_0_vld_in) & (1'b0 == stream_in_V_data_V_0_ack_out) & (stream_in_V_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == stream_in_V_data_V_0_ack_out) & (stream_in_V_data_V_0_state == ap_const_lv2_1)))) begin
            stream_in_V_data_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == stream_in_V_data_V_0_vld_in) & (stream_in_V_data_V_0_state == ap_const_lv2_2)) | ((1'b1 == stream_in_V_data_V_0_ack_out) & (stream_in_V_data_V_0_state == ap_const_lv2_1)) | ((stream_in_V_data_V_0_state == ap_const_lv2_3) & ~((1'b1 == stream_in_V_data_V_0_vld_in) & (1'b0 == stream_in_V_data_V_0_ack_out)) & ~((1'b0 == stream_in_V_data_V_0_vld_in) & (1'b1 == stream_in_V_data_V_0_ack_out))))) begin
            stream_in_V_data_V_0_state <= ap_const_lv2_3;
        end else begin
            stream_in_V_data_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_last_V_0_ack_out) & (1'b1 == stream_in_V_last_V_0_vld_out))) begin
            stream_in_V_last_V_0_sel_rd <= ~stream_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_last_V_0_vld_in) & (1'b1 == stream_in_V_last_V_0_ack_in))) begin
            stream_in_V_last_V_0_sel_wr <= ~stream_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == stream_in_V_last_V_0_vld_in) & (1'b1 == stream_in_V_last_V_0_ack_out) & (ap_const_lv2_3 == stream_in_V_last_V_0_state)) | ((1'b0 == stream_in_V_last_V_0_vld_in) & (ap_const_lv2_2 == stream_in_V_last_V_0_state)))) begin
            stream_in_V_last_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == stream_in_V_last_V_0_vld_in) & (1'b0 == stream_in_V_last_V_0_ack_out) & (ap_const_lv2_3 == stream_in_V_last_V_0_state)) | ((1'b0 == stream_in_V_last_V_0_ack_out) & (ap_const_lv2_1 == stream_in_V_last_V_0_state)))) begin
            stream_in_V_last_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == stream_in_V_last_V_0_vld_in) & (ap_const_lv2_2 == stream_in_V_last_V_0_state)) | ((1'b1 == stream_in_V_last_V_0_ack_out) & (ap_const_lv2_1 == stream_in_V_last_V_0_state)) | ((ap_const_lv2_3 == stream_in_V_last_V_0_state) & ~((1'b1 == stream_in_V_last_V_0_vld_in) & (1'b0 == stream_in_V_last_V_0_ack_out)) & ~((1'b0 == stream_in_V_last_V_0_vld_in) & (1'b1 == stream_in_V_last_V_0_ack_out))))) begin
            stream_in_V_last_V_0_state <= ap_const_lv2_3;
        end else begin
            stream_in_V_last_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_tkeep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_tkeep_V_0_ack_out) & (1'b1 == stream_in_V_tkeep_V_0_vld_out))) begin
            stream_in_V_tkeep_V_0_sel_rd <= ~stream_in_V_tkeep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_tkeep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_tkeep_V_0_vld_in) & (1'b1 == stream_in_V_tkeep_V_0_ack_in))) begin
            stream_in_V_tkeep_V_0_sel_wr <= ~stream_in_V_tkeep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_tkeep_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == stream_in_V_tkeep_V_0_vld_in) & (1'b1 == stream_in_V_tkeep_V_0_ack_out) & (ap_const_lv2_3 == stream_in_V_tkeep_V_0_state)) | ((1'b0 == stream_in_V_tkeep_V_0_vld_in) & (ap_const_lv2_2 == stream_in_V_tkeep_V_0_state)))) begin
            stream_in_V_tkeep_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == stream_in_V_tkeep_V_0_vld_in) & (1'b0 == stream_in_V_tkeep_V_0_ack_out) & (ap_const_lv2_3 == stream_in_V_tkeep_V_0_state)) | ((1'b0 == stream_in_V_tkeep_V_0_ack_out) & (ap_const_lv2_1 == stream_in_V_tkeep_V_0_state)))) begin
            stream_in_V_tkeep_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == stream_in_V_tkeep_V_0_vld_in) & (ap_const_lv2_2 == stream_in_V_tkeep_V_0_state)) | ((1'b1 == stream_in_V_tkeep_V_0_ack_out) & (ap_const_lv2_1 == stream_in_V_tkeep_V_0_state)) | ((ap_const_lv2_3 == stream_in_V_tkeep_V_0_state) & ~((1'b1 == stream_in_V_tkeep_V_0_vld_in) & (1'b0 == stream_in_V_tkeep_V_0_ack_out)) & ~((1'b0 == stream_in_V_tkeep_V_0_vld_in) & (1'b1 == stream_in_V_tkeep_V_0_ack_out))))) begin
            stream_in_V_tkeep_V_0_state <= ap_const_lv2_3;
        end else begin
            stream_in_V_tkeep_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_data_V_1_ack_out) & (1'b1 == stream_out_V_data_V_1_vld_out))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_data_V_1_vld_in) & (1'b1 == stream_out_V_data_V_1_ack_in))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == stream_out_V_data_V_1_vld_in) & (1'b1 == stream_out_V_data_V_1_ack_out) & (ap_const_lv2_3 == stream_out_V_data_V_1_state)) | ((1'b0 == stream_out_V_data_V_1_vld_in) & (ap_const_lv2_2 == stream_out_V_data_V_1_state)))) begin
            stream_out_V_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == stream_out_V_data_V_1_vld_in) & (1'b0 == stream_out_V_data_V_1_ack_out) & (ap_const_lv2_3 == stream_out_V_data_V_1_state)) | ((1'b0 == stream_out_V_data_V_1_ack_out) & (ap_const_lv2_1 == stream_out_V_data_V_1_state)))) begin
            stream_out_V_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == stream_out_V_data_V_1_vld_in) & (ap_const_lv2_2 == stream_out_V_data_V_1_state)) | ((1'b1 == stream_out_V_data_V_1_ack_out) & (ap_const_lv2_1 == stream_out_V_data_V_1_state)) | ((ap_const_lv2_3 == stream_out_V_data_V_1_state) & ~((1'b1 == stream_out_V_data_V_1_vld_in) & (1'b0 == stream_out_V_data_V_1_ack_out)) & ~((1'b0 == stream_out_V_data_V_1_vld_in) & (1'b1 == stream_out_V_data_V_1_ack_out))))) begin
            stream_out_V_data_V_1_state <= ap_const_lv2_3;
        end else begin
            stream_out_V_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_last_V_1_ack_out) & (1'b1 == stream_out_V_last_V_1_vld_out))) begin
            stream_out_V_last_V_1_sel_rd <= ~stream_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_last_V_1_vld_in) & (1'b1 == stream_out_V_last_V_1_ack_in))) begin
            stream_out_V_last_V_1_sel_wr <= ~stream_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == stream_out_V_last_V_1_vld_in) & (1'b1 == stream_out_V_last_V_1_ack_out) & (ap_const_lv2_3 == stream_out_V_last_V_1_state)) | ((1'b0 == stream_out_V_last_V_1_vld_in) & (ap_const_lv2_2 == stream_out_V_last_V_1_state)))) begin
            stream_out_V_last_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == stream_out_V_last_V_1_vld_in) & (1'b0 == stream_out_V_last_V_1_ack_out) & (ap_const_lv2_3 == stream_out_V_last_V_1_state)) | ((1'b0 == stream_out_V_last_V_1_ack_out) & (ap_const_lv2_1 == stream_out_V_last_V_1_state)))) begin
            stream_out_V_last_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == stream_out_V_last_V_1_vld_in) & (ap_const_lv2_2 == stream_out_V_last_V_1_state)) | ((1'b1 == stream_out_V_last_V_1_ack_out) & (ap_const_lv2_1 == stream_out_V_last_V_1_state)) | ((ap_const_lv2_3 == stream_out_V_last_V_1_state) & ~((1'b1 == stream_out_V_last_V_1_vld_in) & (1'b0 == stream_out_V_last_V_1_ack_out)) & ~((1'b0 == stream_out_V_last_V_1_vld_in) & (1'b1 == stream_out_V_last_V_1_ack_out))))) begin
            stream_out_V_last_V_1_state <= ap_const_lv2_3;
        end else begin
            stream_out_V_last_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_tkeep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_tkeep_V_1_ack_out) & (1'b1 == stream_out_V_tkeep_V_1_vld_out))) begin
            stream_out_V_tkeep_V_1_sel_rd <= ~stream_out_V_tkeep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_tkeep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_tkeep_V_1_vld_in) & (1'b1 == stream_out_V_tkeep_V_1_ack_in))) begin
            stream_out_V_tkeep_V_1_sel_wr <= ~stream_out_V_tkeep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_tkeep_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == stream_out_V_tkeep_V_1_vld_in) & (1'b1 == stream_out_V_tkeep_V_1_ack_out) & (ap_const_lv2_3 == stream_out_V_tkeep_V_1_state)) | ((1'b0 == stream_out_V_tkeep_V_1_vld_in) & (ap_const_lv2_2 == stream_out_V_tkeep_V_1_state)))) begin
            stream_out_V_tkeep_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == stream_out_V_tkeep_V_1_vld_in) & (1'b0 == stream_out_V_tkeep_V_1_ack_out) & (ap_const_lv2_3 == stream_out_V_tkeep_V_1_state)) | ((1'b0 == stream_out_V_tkeep_V_1_ack_out) & (ap_const_lv2_1 == stream_out_V_tkeep_V_1_state)))) begin
            stream_out_V_tkeep_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == stream_out_V_tkeep_V_1_vld_in) & (ap_const_lv2_2 == stream_out_V_tkeep_V_1_state)) | ((1'b1 == stream_out_V_tkeep_V_1_ack_out) & (ap_const_lv2_1 == stream_out_V_tkeep_V_1_state)) | ((ap_const_lv2_3 == stream_out_V_tkeep_V_1_state) & ~((1'b1 == stream_out_V_tkeep_V_1_vld_in) & (1'b0 == stream_out_V_tkeep_V_1_ack_out)) & ~((1'b0 == stream_out_V_tkeep_V_1_vld_in) & (1'b1 == stream_out_V_tkeep_V_1_ack_out))))) begin
            stream_out_V_tkeep_V_1_state <= ap_const_lv2_3;
        end else begin
            stream_out_V_tkeep_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_data_V_0_load_A)) begin
        stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_data_V_0_load_B)) begin
        stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_last_V_0_load_A)) begin
        stream_in_V_last_V_0_payload_A <= stream_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_last_V_0_load_B)) begin
        stream_in_V_last_V_0_payload_B <= stream_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_tkeep_V_0_load_A)) begin
        stream_in_V_tkeep_V_0_payload_A <= stream_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_tkeep_V_0_load_B)) begin
        stream_in_V_tkeep_V_0_payload_B <= stream_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_data_V_1_load_A)) begin
        stream_out_V_data_V_1_payload_A <= x_V_fu_179_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_data_V_1_load_B)) begin
        stream_out_V_data_V_1_payload_B <= x_V_fu_179_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_last_V_1_load_A)) begin
        stream_out_V_last_V_1_payload_A <= stream_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_last_V_1_load_B)) begin
        stream_out_V_last_V_1_payload_B <= stream_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_tkeep_V_1_load_A)) begin
        stream_out_V_tkeep_V_1_payload_A <= stream_in_V_tkeep_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_tkeep_V_1_load_B)) begin
        stream_out_V_tkeep_V_1_payload_B <= stream_in_V_tkeep_V_0_data_out;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stream_in_TDATA_blk_n = stream_in_V_data_V_0_state[1'b0];
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((stream_in_V_data_V_0_vld_out == 1'b0) | (1'b0 == stream_out_V_data_V_1_ack_in)))) begin
        stream_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_in_V_data_V_0_sel)) begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_B;
    end else begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((stream_in_V_data_V_0_vld_out == 1'b0) | (1'b0 == stream_out_V_data_V_1_ack_in)))) begin
        stream_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_in_V_last_V_0_sel)) begin
        stream_in_V_last_V_0_data_out = stream_in_V_last_V_0_payload_B;
    end else begin
        stream_in_V_last_V_0_data_out = stream_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((stream_in_V_data_V_0_vld_out == 1'b0) | (1'b0 == stream_out_V_data_V_1_ack_in)))) begin
        stream_in_V_tkeep_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_tkeep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_in_V_tkeep_V_0_sel)) begin
        stream_in_V_tkeep_V_0_data_out = stream_in_V_tkeep_V_0_payload_B;
    end else begin
        stream_in_V_tkeep_V_0_data_out = stream_in_V_tkeep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state[1'b1];
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == stream_out_V_data_V_1_sel)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((stream_in_V_data_V_0_vld_out == 1'b0) | (1'b0 == stream_out_V_data_V_1_ack_in)))) begin
        stream_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_out_V_last_V_1_sel)) begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B;
    end else begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((stream_in_V_data_V_0_vld_out == 1'b0) | (1'b0 == stream_out_V_data_V_1_ack_in)))) begin
        stream_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_out_V_tkeep_V_1_sel)) begin
        stream_out_V_tkeep_V_1_data_out = stream_out_V_tkeep_V_1_payload_B;
    end else begin
        stream_out_V_tkeep_V_1_data_out = stream_out_V_tkeep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((stream_in_V_data_V_0_vld_out == 1'b0) | (1'b0 == stream_out_V_data_V_1_ack_in)))) begin
        stream_out_V_tkeep_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_tkeep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (~((stream_in_V_data_V_0_vld_out == 1'b0) | (1'b0 == stream_out_V_data_V_1_ack_in))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == stream_out_V_data_V_1_ack_in)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign stream_in_TREADY = stream_in_V_tkeep_V_0_state[1'b1];

assign stream_in_V_data_V_0_ack_in = stream_in_V_data_V_0_state[1'b1];

assign stream_in_V_data_V_0_load_A = (stream_in_V_data_V_0_state_cmp_full & ~stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_load_B = (stream_in_V_data_V_0_sel_wr & stream_in_V_data_V_0_state_cmp_full);

assign stream_in_V_data_V_0_sel = stream_in_V_data_V_0_sel_rd;

assign stream_in_V_data_V_0_state_cmp_full = ((stream_in_V_data_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign stream_in_V_data_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_data_V_0_vld_out = stream_in_V_data_V_0_state[1'b0];

assign stream_in_V_last_V_0_ack_in = stream_in_V_last_V_0_state[1'b1];

assign stream_in_V_last_V_0_load_A = (stream_in_V_last_V_0_state_cmp_full & ~stream_in_V_last_V_0_sel_wr);

assign stream_in_V_last_V_0_load_B = (stream_in_V_last_V_0_sel_wr & stream_in_V_last_V_0_state_cmp_full);

assign stream_in_V_last_V_0_sel = stream_in_V_last_V_0_sel_rd;

assign stream_in_V_last_V_0_state_cmp_full = ((stream_in_V_last_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign stream_in_V_last_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_last_V_0_vld_out = stream_in_V_last_V_0_state[1'b0];

assign stream_in_V_tkeep_V_0_ack_in = stream_in_V_tkeep_V_0_state[1'b1];

assign stream_in_V_tkeep_V_0_load_A = (stream_in_V_tkeep_V_0_state_cmp_full & ~stream_in_V_tkeep_V_0_sel_wr);

assign stream_in_V_tkeep_V_0_load_B = (stream_in_V_tkeep_V_0_sel_wr & stream_in_V_tkeep_V_0_state_cmp_full);

assign stream_in_V_tkeep_V_0_sel = stream_in_V_tkeep_V_0_sel_rd;

assign stream_in_V_tkeep_V_0_state_cmp_full = ((stream_in_V_tkeep_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign stream_in_V_tkeep_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_tkeep_V_0_vld_out = stream_in_V_tkeep_V_0_state[1'b0];

assign stream_out_TDATA = stream_out_V_data_V_1_data_out;

assign stream_out_TKEEP = stream_out_V_tkeep_V_1_data_out;

assign stream_out_TLAST = stream_out_V_last_V_1_data_out;

assign stream_out_TVALID = stream_out_V_tkeep_V_1_state[1'b0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'b1];

assign stream_out_V_data_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_sel_wr & stream_out_V_data_V_1_state_cmp_full);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'b0];

assign stream_out_V_last_V_1_ack_in = stream_out_V_last_V_1_state[1'b1];

assign stream_out_V_last_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full & ~stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_sel_wr & stream_out_V_last_V_1_state_cmp_full);

assign stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd;

assign stream_out_V_last_V_1_state_cmp_full = ((stream_out_V_last_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign stream_out_V_last_V_1_vld_out = stream_out_V_last_V_1_state[1'b0];

assign stream_out_V_tkeep_V_1_ack_in = stream_out_V_tkeep_V_1_state[1'b1];

assign stream_out_V_tkeep_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_tkeep_V_1_load_A = (stream_out_V_tkeep_V_1_state_cmp_full & ~stream_out_V_tkeep_V_1_sel_wr);

assign stream_out_V_tkeep_V_1_load_B = (stream_out_V_tkeep_V_1_sel_wr & stream_out_V_tkeep_V_1_state_cmp_full);

assign stream_out_V_tkeep_V_1_sel = stream_out_V_tkeep_V_1_sel_rd;

assign stream_out_V_tkeep_V_1_state_cmp_full = ((stream_out_V_tkeep_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign stream_out_V_tkeep_V_1_vld_out = stream_out_V_tkeep_V_1_state[1'b0];

assign tmp_1_fu_109_p4 = {{stream_in_V_data_V_0_data_out[ap_const_lv32_3F : ap_const_lv32_38]}};

assign tmp_2_fu_119_p4 = {{stream_in_V_data_V_0_data_out[ap_const_lv32_F : ap_const_lv32_8]}};

assign tmp_3_fu_129_p4 = {{stream_in_V_data_V_0_data_out[ap_const_lv32_1F : ap_const_lv32_18]}};

assign tmp_4_fu_139_p4 = {{stream_in_V_data_V_0_data_out[ap_const_lv32_2F : ap_const_lv32_28]}};

assign tmp_5_fu_149_p4 = {{stream_in_V_data_V_0_data_out[ap_const_lv32_17 : ap_const_lv32_10]}};

assign tmp_6_fu_159_p4 = {{stream_in_V_data_V_0_data_out[ap_const_lv32_27 : ap_const_lv32_20]}};

assign tmp_7_fu_169_p4 = {{stream_in_V_data_V_0_data_out[ap_const_lv32_37 : ap_const_lv32_30]}};

assign tmp_fu_105_p1 = stream_in_V_data_V_0_data_out[7:0];

assign x_V_fu_179_p9 = {{{{{{{{tmp_fu_105_p1}, {tmp_2_fu_119_p4}}, {tmp_5_fu_149_p4}}, {tmp_3_fu_129_p4}}, {tmp_6_fu_159_p4}}, {tmp_4_fu_139_p4}}, {tmp_7_fu_169_p4}}, {tmp_1_fu_109_p4}};

endmodule //reverseEndian64
